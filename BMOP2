import data.real.basic
import algebra
import tactic
import algebra.quadratic_discriminant

theorem AMGM (a b : ℝ) (ha: 0 ≤ a) (hb: 0 ≤ b): a + b ≥ 2*real.sqrt(a*b):=
begin
have ineq1: a+b ≥ 0, {linarith,}, 
have eq2: real.sqrt(4*(a*b))=real.sqrt(4)*real.sqrt(a*b), {exact (4:ℝ).sqrt_mul' (mul_nonneg ha hb),}, 
have eq3: real.sqrt(4)=2,
{
    have obs1: (2:ℝ)^2=(4:ℝ), {ring,}, have obs2: (0:ℝ) ≤ 2, {linarith,}, have obs3: 0 ≤ 4, {linarith,}, rw ← obs1, 
    exact real.sqrt_sqr obs2,
},
have ineq: (a+b)^2 ≥ 4 *(a*b),
{
    have obs1: (a+b)^2-4*a*b=(a-b)^2, {ring,}, have obs2: 0 ≤ (a+b)^2-4*a*b, {rw obs1, exact pow_two_nonneg (a - b),},
    linarith,
},
have eq4: (a+b)^2 ≥ 0, {exact pow_nonneg ineq1 2,}, have ineq2: real.sqrt((a+b)^2) ≥ real.sqrt(4*(a*b)), {exact real.sqrt_le_sqrt ineq,},
rw eq2 at ineq2, rw eq3 at ineq2, have obs: real.sqrt((a+b)^2)=a+b, {exact real.sqrt_sqr ineq1,}, rw obs at ineq2, exact ineq2,
end

theorem mul_mul_div_self' (a b c : ℝ) (hb: b ≠ 0) (hc: c ≠ 0): a/b = (a*c)/(b*c):=
begin
have fact: a/b = a/b*1, {ring,}, rw ← (div_self hc) at fact, rw ← div_mul_div a b c c, exact fact,
end

lemma useful (a : ℝ) (ha: 0 ≤ a ∧ a ≤ 1): (2/(a+1))^2-2*(1-a)*(2/(a+1))-a ≤ 0:=
begin
cases ha with ha1 ha2, have obva: a + 1 > 0, {linarith,},
have rk1: (2/(a+1))^2=(2/(a+1))*(2/(a+1)), {ring,}, have rk2: (2/(a+1))*(2/(a+1)) = (2*2)/((a+1)*(a+1)), {exact div_mul_div 2 (a+1) 2 (a+1)}, 
have rk3: (2:ℝ)*2=4, {linarith,}, have rk4: (a+1)*(a+1)=(a+1)^2, {ring,}, rw rk3 at rk2, rw rk4 at rk2, clear rk3 rk4,
have rk3: 2*(1-a)*(2/(a+1))=(2/(a+1))*(2*(1-a)), {ring,}, have rk4: (2/(a+1))*(2*(1-a)) = (2*(2*(1-a)))/(a+1), {exact div_mul_eq_mul_div (2*(1-a)) 2 (a+1),},
have rk5: 2*(2*(1-a))=4*(1-a), {ring,}, rw rk5 at rk4, 
rw [rk1, rk2, rk3, rk4], clear rk1 rk2 rk3 rk4 rk5, have rk1: (a+1)^2 > 0, {exact pow_pos obva 2,}, 
have rk2: 4/(a+1)^2 - 4*(1-a)/(a+1)-a = (4/(a+1)^2-4*(1-a)/(a+1))-a, {ring,}, have rkm: a+1 ≠ 0, {exact ne_of_gt obva,}, have rks: (a+1)*(a+1)=(a+1)^2, {ring,},
have rk3: (1-a)/(a+1)=(1-a)*(a+1)/(a+1)^2, {rw mul_mul_div_self' (1-a) (a+1) (a+1) rkm, rw rks, exact rkm,}, clear rkm rks,
have rk4: 4*(1-a)/(a+1) = 4*((1-a)/(a+1)), {ring,}, rw rk4, rw rk3, 
have fact: 4/(a+1)^2 - 4*(1-a)*(a+1)/(a+1)^2 = 4*(a^2)/(a+1)^2,
{
rw div_sub_div_same 4 (4*(1-a)*(a+1)) ((a+1)^2), have obs: 4 - 4*(1-a)*(a+1)=4*a^2, {ring,}, rw obs,
}, 
have fact'': 4 / (a+1)^2 - 4 * ((1-a)*(a+1)/(a+1)^2) - a = 4/(a+1)^2 - 4*(1-a)*(a+1)/(a+1)^2-a, {ring,}, rw fact'', rw fact,
have obs: a = a / 1 , {ring,}, have obs2: a / 1 = (a * (a+1)^2) / ((a+1)^2), {rw mul_mul_div_self' a 1 ((a+1)^2) _ _, rw one_mul, linarith, linarith,},
rw obs2 at obs, have obs3: 4*a^2/(a+1)^2-a=4*a^2/(a+1)^2-a*(a+1)^2/(a+1)^2, {exact congr_arg (has_sub.sub (4 * a ^ 2 / (a + 1) ^ 2)) obs,},
rw obs3, have obs4: a*(a+1)^2=a^3+2*a^2+a, {ring,}, rw obs4, rw div_sub_div_same (4*a^2) (a^3+2*a^2+a) ((a+1)^2),
have obs5: 4*a^2-(a^3+2*a^2+a)=-a*(a-1)^2, {ring,}, rw obs5, have obs6: -a ≤ 0, {linarith,}, have obs7: 0 ≤ (a-1)^2, {exact pow_two_nonneg (a - 1),},
have obs8: (-a)*(a-1)^2 ≤ 0, {exact mul_nonpos_of_nonpos_of_nonneg obs6 obs7,}, exact div_nonpos_of_nonpos_of_pos obs8 rk1,
end

lemma something (a b c: ℝ) (ha: 0 < a) (habc: b/a ≤ c) : a * c ≥ b:=
begin
exact (div_le_iff' ha).mp habc,
end


--Let a, b, c be three real numbers, such that 0 ≤ a ≤ b ≤ c and a+b+c = ab+bc+ca > 0. Prove that √(bc)*(a+1)≥2.

theorem BP2 (a b c : ℝ) (habc1: 0 ≤ a ∧ a ≤ b ∧ b ≤ c) (habc2: a+b+c = a*b + b*c + c*a ∧ 0 < a + b + c):
(real.sqrt(b*c))*(a+1)≥2:=
begin
let t:=real.sqrt(b*c),
have hb: 0 ≤ b, {linarith,}, have hc: 0 ≤ c, {linarith,}, have hbc: 0 ≤ b*c, {exact mul_nonneg hb hc,},
have fact: a < 1 ∨ 1 ≤ a, {exact lt_or_ge a 1,},
cases fact with ha1 ha2,
{
have obs: 1 - a > 0, {linarith,}, have obs2: t*t=b*c, {exact real.mul_self_sqrt hbc,}, have obv: t*t=t^2, {ring,}, have ha1': a ≤ 1, {linarith,},
rw obv at obs2, clear obv, cases habc2 with h1 h2, 
have fact: b*c=a+b+c-a*b-c*a, {linarith,}, have fact': a+b+c-a*b-c*a=a+(1-a)*(b+c),{ring,},
have fact'': (1-a)*(b+c)≥(1-a)*(2*t), {exact (mul_le_mul_left obs).mpr (AMGM b c hb hc),}, 
have ineq2: a + (1-a)*(b+c) ≥ a + 2*(1-a)*t, {linarith,}, rw ← obs2 at fact, rw ← fact at fact', rw ← fact' at ineq2,
have ineq3: t^2-2*(1-a)*t - a ≥ 0, {linarith,},  
have quadratic1: discrim 1 (-(2*(1-a))) (-a) ≥ 0, 
{
rw discrim, have obs: (-(2*(1-a)))^2-4*1*(-a)=4*(a^2-a+1), {ring,}, have obs2: 0 ≤ a^2, {exact pow_two_nonneg a,}, have obs3: -1 ≤ -a, {linarith,},
have obs4: 0 ≤ a^2-a+1, {linarith,}, linarith,
},
let s:= real.sqrt(discrim 1 (-(2*(1-a))) (-a)), have eq1: s*s=discrim 1 (-(2*(1-a))) (-a), {exact real.mul_self_sqrt quadratic1,},
have eqs: 0 ≤ s, {exact (discrim 1 (-(2 * (1 - a))) (-a)).sqrt_nonneg,},
let x1:= (2*(1-a) + s)/2, let x2:= (2*(1-a)-s)/2,
have eq2: ∀ t : ℝ, t^2-2*(1-a)*t-a=(t-x1)*(t-x2), 
{
intro t,
have obs: (t-x1)*(t-x2)=t^2-(x1+x2)*t+x1*x2, {ring,}, have obv1: x1=(2*(1-a) + s)/2, {refl,}, have obv2: x2=(2*(1-a)-s)/2, {refl,},
have fact1: x1+x2 = 2*(1-a),
{
    rw [obv1, obv2], have rk: ((2*(1-a)+s)+(2*(1-a)-s))/2=(2*(1-a)+s)/2+(2*(1-a)-s)/2, {exact add_div (2*(1-a)+s) (2*(1-a)-s) 2,}, 
    have rk2: (2*(1-a)+s)+(2*(1-a)-s)=4*(1-a), {ring,}, rw rk2 at rk, rw ← rk, linarith,
}, rw fact1 at obs,
have fact2: x1*x2=-a, 
{
    rw [obv1, obv2], have rk: ((2*(1-a)+s)/2) * ((2*(1-a)-s)/2) = ((2*(1-a)+s)*(2*(1-a)-s))/(2*2), {exact div_mul_div (2*(1-a)+s) 2 (2*(1-a)-s) 2,},
    have rk2: (2*(1-a)+s)*(2*(1-a)-s)=4*(1-a)^2-s*s, {ring,}, rw eq1 at rk2, rw discrim at rk2, 
    have obs': (-(2*(1-a)))^2-4*1*(-a)=4*(a^2-a+1), {ring,}, rw obs' at rk2, have obs'': 4*(1-a)^2-4*(a^2-a+1)=-4*a, {ring,}, linarith,
},
rw fact2 at obs, tauto,
}, clear ineq2 fact' fact fact'' obs2,
have obs': x2 ≤ 0, 
{
have obv1: x2=(2*(1-a)-s)/2, {refl,},
have fact1: (2*(1-a))^2 ≤ s*s,
{
rw eq1, have rk: (-(2*(1-a)))^2-4*1*(-a)=4*(a^2-a+1), {ring,}, rw discrim, rw rk, have rk2: (2*(1-a))^2=4*(a^2-2*a+1), {ring,}, linarith,
},
have rk: 0 ≤ 2*(1-a), {linarith,}, have rk2: real.sqrt((2*(1-a))^2)=2*(1-a), {exact real.sqrt_sqr rk,}, have rk3: real.sqrt(s*s)=s, {exact congr_arg real.sqrt eq1,},
have rk1': 0 ≤ (2*(1-a))^2, {exact pow_nonneg rk 2,}, have rk2': 0 ≤ s*s, {exact le_trans rk1' fact1,}, 
have obs: real.sqrt((2*(1-a))^2) ≤ real.sqrt(s*s) ↔ (2*(1-a))^2 ≤ s*s, {exact real.sqrt_le rk1' rk2',}, 
have factf: real.sqrt((2*(1-a))^2) ≤ real.sqrt(s*s), {exact (real.sqrt_le rk1' rk2').mpr fact1,}, rw [rk2, rk3] at factf,
linarith,
},
have obs'': 0 ≤ x1,
{
    have obv1: x1=(2*(1-a)+s)/2, {refl,}, have rk: 2*(1-a) + s ≥ 0, {linarith,}, linarith,
},
have quadratic_intervals: ∀ x : ℝ, x^2-2*(1-a)*x-a ≤ 0 → ((x2 ≤ x) ∧ (x ≤ x1)), 
{
intros x hx, have fact: x < x2 ∨ x2 ≤ x, {exact lt_or_ge x x2,},
cases fact with hx1 hx2,
{
have rk1: x < x1, {linarith,}, have rk2: 0 < x2-x, {linarith,}, have rk3: 0 < x1-x, {linarith,}, have rk4: (x-x1)*(x-x2)=(x1-x)*(x2-x), {ring,},
have rk5: 0 < (x1-x)*(x2-x), {exact mul_pos rk3 rk2,}, exfalso, rw ← rk4 at rk5, rw ← eq2 x at rk5, linarith, 
},
{
have fact2: x ≤ x1 ∨ x1 < x, {exact le_or_lt x x1,}, cases fact2 with hx3 hx4,
{
have rk1: 0 ≤ x-x2, {linarith,}, have rk2: x - x1 ≤ 0, {linarith,}, have rk3: (x - x1) * (x - x2) ≤ 0, {exact mul_nonpos_of_nonpos_of_nonneg rk2 rk1},
rw ← eq2 x at rk3,
have rk4: x2 ≤ x ∧ x ≤ x1, {tauto,}, exact rk4,
},
{
have rk1: x2 < x, {linarith,}, have rk2: 0<x-x1, {linarith,}, have rk3: 0 < x - x2, {linarith,}, have rk4: 0 < (x-x1)*(x-x2), {exact mul_pos rk2 rk3,},
exfalso, rw ← eq2 x at rk4, linarith,
},
},
}, have obva: a + 1 > 0, {linarith,},  have obva': 0 ≤ a, {linarith,},
have fact: (2/(a+1))^2-2*(1-a)*(2/(a+1))-a ≤ 0, {exact useful a ⟨obva', ha1'⟩,}, 
specialize quadratic_intervals (2/(a+1)) fact,
have quadratic_open_intervals: ∀ x : ℝ, 0 ≤ x^2-2*(1-a)*x-a → ((x ≤ x2) ∨ (x1 ≤ x)),
{
intros x hx, have fact: x ≤ x2 ∨ x2 < x, {exact le_or_lt x x2,},
cases fact with hx1 hx2,
{left, exact hx1,},
{
have fact2: x < x1 ∨ x1 ≤ x, {exact lt_or_ge x x1,}, cases fact2 with hx3 hx4,
{
have rk1: 0 < x - x2, {linarith,}, have rk2: x - x1 < 0, {linarith,}, have rk3: (x-x1)*(x-x2) < 0,{exact mul_neg_of_neg_of_pos rk2 rk1,}, 
exfalso, rw ← eq2 x at rk3, linarith,
},{right, exact hx4,},
},
},
specialize quadratic_open_intervals t ineq3, 
have fact: 0 < b, 
{
by_contradiction, push_neg at a_1, have obs: b = 0, {linarith,}, have ha: a ≤ b, {linarith,}, have obs': a = 0, {linarith,}, rw [obs, obs'] at h2,
rw [obs, obs'] at h1, clear ha a_1, have fact: 0*0 + 0 * c + c * 0 = 0, {ring,}, rw fact at h1, rw h1 at h2, linarith,
},
have fact': 0 < c, {linarith,}, have factf: 0 < b * c, {exact mul_pos fact fact',}, have factf': 0 < t, {exact real.sqrt_pos.mpr factf,},
have factf'': ¬(t ≤ x2), {linarith,}, have obsf: x1 ≤ t, {tauto,}, clear fact fact' factf factf'', have fact: 2/(a+1) ≤ t, {linarith,}, 
have obv: t = real.sqrt (b*c), {refl,}, rw ← obv, have obs: 2 ≤ (a+1)*t, {exact (div_le_iff' obva).mp fact,}, linarith,
},
{
have fact': b ≥ 1, {linarith,}, have fact'': c ≥ 1, {linarith,}, have fact''': c ≥ 0, {linarith,},
have ineq1: c ≤ b*c, {exact le_mul_of_ge_one_left fact''' fact',}, have ineq2: 1 ≤ b*c, {linarith,}, 
have ineq3: 0 ≤ b*c, {linarith,}, have obs2: (0:ℝ) ≤ (1:ℝ), {linarith,}, 
have obs': real.sqrt(1) ≤ real.sqrt(b*c) ↔ 1 ≤ b*c,{exact real.sqrt_le obs2 ineq3,},
have theorem1: real.sqrt(1) ≤ real.sqrt(b*c), {exact (real.sqrt_le obs2 ineq3).mpr ineq2,},rw (real.sqrt_one) at theorem1,
have fact: 2 ≤ a + 1, {linarith,}, have fact1: 0 ≤ a + 1, {linarith,},
have final1: (a+1) ≤ (a+1) * real.sqrt(b*c), {exact le_mul_of_ge_one_right fact1 (theorem1),}, linarith,
},
end
